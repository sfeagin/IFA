Set-StrictMode -Version Latest

# CONFIGURATION
$Config = @{
    RootPath     = "\\SUSA059A59\Output_Prod"
    SqlServer    = "YourSqlServerName"
    Database     = "staging"
    CsvSqlScript = "C:\Scripts\import_cycle_time.sql"
    ApiSqlTable  = "staging.forcam.api_data"
    LogFile      = "C:\Logs\forecam_import.log"
    MaxRetries   = 3
    DelaySeconds = 2
    ApiBaseUrl   = "https://your-forecam-server/api"
    ApiKey       = "your-api-key"  # or use OAuth bearer token
    ApiEndpoints = @("/cycleTimes", "/operations", "/orders")
}

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Add-Content -Path $Config.LogFile -Value "$timestamp [$Level] $Message"
}

# CSV FILE IMPORT SECTION
function Import-CsvFile {
    param([string]$FilePath, [string]$MachineName, [string]$BackupPath, [string]$ErrorPath)

    for ($attempt = 1; $attempt -le $Config.MaxRetries; $attempt++) {
        Write-Log "Attempt $attempt: Importing file $FilePath"
        $result = & sqlcmd -S $Config.SqlServer -d $Config.Database -i $Config.CsvSqlScript `
            -v FilePath="'$FilePath'" -v MachineName="'$MachineName'" -b 2>&1

        if ($LASTEXITCODE -eq 0) {
            Move-Item -Path $FilePath -Destination $BackupPath -Force
            Write-Log "SUCCESS: Imported and moved $FilePath to Backup"
            return
        } else {
            Write-Log "FAILED: Attempt $attempt for $FilePath. Error: $result" "ERROR"
            Start-Sleep -Seconds $Config.DelaySeconds
        }
    }

    Move-Item -Path $FilePath -Destination $ErrorPath -Force
    Write-Log "FINAL FAILURE: Moved $FilePath to Error folder" "ERROR"
}

function Import-AllCsvFiles {
    Write-Log "Starting CSV Import"

    $folders = Get-ChildItem -Path $Config.RootPath -Directory
    foreach ($folder in $folders) {
        $MachineName = $folder.Name
        $MachinePath = Join-Path $Config.RootPath $MachineName
        $BackupPath  = Join-Path $MachinePath "Backup"
        $ErrorPath   = Join-Path $MachinePath "Error"

        New-Item -ItemType Directory -Path $BackupPath -Force | Out-Null
        New-Item -ItemType Directory -Path $ErrorPath -Force | Out-Null

        $csvFiles = Get-ChildItem -Path $MachinePath -Filter "*.csv" -File
        foreach ($file in $csvFiles) {
            Import-CsvFile -FilePath $file.FullName -MachineName $MachineName `
                           -BackupPath $BackupPath -ErrorPath $ErrorPath
        }
    }

    Write-Log "CSV Import Complete"
}

function Import-ApiData {
    Write-Log "Starting API fetch and SQL import (Flattened JSON)"

    foreach ($endpoint in $Config.ApiEndpoints) {
        $page = 0
        do {
            $uri = "$($Config.ApiBaseUrl)$endpoint?page=$page"
            $headers = @{ "Authorization" = "Bearer $($Config.ApiKey)" }

            try {
                $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method GET

                if ($response -and $response.items.Count -gt 0) {
                    $connectionString = "Server=$($Config.SqlServer);Database=$($Config.Database);Integrated Security=True;"
                    $connection = New-Object System.Data.SqlClient.SqlConnection $connectionString
                    $connection.Open()

                    foreach ($item in $response.items) {
                        $machine = $item.machineName
                        $material = $item.materialNumber
                        $cycle = $item.cycleTime
                        $operation = $item.operationNumber
                        $timestamp = Get-Date $item.timestamp -Format "yyyy-MM-dd HH:mm:ss"
                        $jsonBlob = $item | ConvertTo-Json -Depth 10

                        $cmd = $connection.CreateCommand()
                        $cmd.CommandText = @"
INSERT INTO staging.forcam.api_cycle_data
(machine_name, material_number, cycle_time, operation_number, timestamp, json_blob)
VALUES (@machine, @material, @cycle, @operation, @timestamp, @json)
"@

                        $cmd.Parameters.Add("@machine",   [System.Data.SqlDbType]::NVarChar, 100).Value = $machine
                        $cmd.Parameters.Add("@material",  [System.Data.SqlDbType]::NVarChar, 100).Value = $material
                        $cmd.Parameters.Add("@cycle",     [System.Data.SqlDbType]::Float).Value = $cycle
                        $cmd.Parameters.Add("@operation", [System.Data.SqlDbType]::NVarChar, 100).Value = $operation
                        $cmd.Parameters.Add("@timestamp", [System.Data.SqlDbType]::DateTime).Value = $timestamp
                        $cmd.Parameters.Add("@json",      [System.Data.SqlDbType]::NVarChar, -1).Value = $jsonBlob

                        $cmd.ExecuteNonQuery()
                    }

                    $connection.Close()
                    Write-Log "Flattened JSON page $page from $endpoint inserted into SQL"
                    $page++
                } else {
                    break
                }
            } catch {
                Write-Log "API Fetch/Insert error on $endpoint page $page: $_" "ERROR"
                break
            }
        } while ($true)
    }

    Write-Log "Flattened API import complete"
}

# LIVE FILE WATCHER
function Start-FileWatcher {
    $watcher = New-Object System.IO.FileSystemWatcher
    $watcher.Path = $Config.RootPath
    $watcher.IncludeSubdirectories = $true
    $watcher.Filter = "*.csv"
    $watcher.EnableRaisingEvents = $true

    Register-ObjectEvent $watcher "Created" -Action {
        Start-Sleep -Seconds 5
        $filePath = $Event.SourceEventArgs.FullPath
        $machineName = Split-Path $filePath -Parent | Split-Path -Leaf
        $backup = Join-Path (Split-Path $filePath -Parent) "Backup"
        $error  = Join-Path (Split-Path $filePath -Parent) "Error"

        Import-CsvFile -FilePath $filePath -MachineName $machineName `
                       -BackupPath $backup -ErrorPath $error
    }

    Write-Log "File watcher started"
}

# MAIN
Import-AllCsvFiles
Import-ApiData
Start-FileWatcher

