# ==============================
# Enhanced PowerShell Script: import-forecam-csv.ps1
# ==============================
# Implements robust logging, error handling, retry logic, modular design
# and configurability for importing Forecam CSV data to SQL Server

Set-StrictMode -Version Latest

# --- CONFIGURATION ---
$Config = @{ 
    RootPath    = "\\SUSA059A59\Output_Prod"
    SqlScript   = "C:\Scripts\import_cycle_time.sql"
    SqlServer   = "YourSqlServerName"
    Database    = "staging"
    LogFile     = "C:\Logs\forecam_import.log"
    MaxRetries  = 3
    DateFormat  = "yyyyMMdd"
    ImportDate  = (Get-Date).AddDays(-1).ToString("yyyyMMdd") # Can be changed to support a range
}

function Write-Log {
    param(
        [string]$Message,
        [string]$Level = "INFO"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    Add-Content -Path $Config.LogFile -Value $logEntry
}

function Wait-For-FileUnlock {
    param ([string]$Path)
    for ($i = 0; $i -lt 5; $i++) {
        try {
            $stream = [System.IO.File]::Open($Path, 'Open', 'Read', 'ReadWrite')
            if ($stream) { $stream.Close(); return $true }
        } catch {
            Start-Sleep -Seconds 2
        }
    }
    return $false
}

function Import-CsvFile {
    param(
        [string]$FilePath,
        [string]$MachineName,
        [string]$BackupPath,
        [string]$ErrorPath
    )

    if (-not (Wait-For-FileUnlock -Path $FilePath)) {
        Write-Log "File is locked: $FilePath" "ERROR"
        Move-Item -Path $FilePath -Destination $ErrorPath -Force
        return
    }

    for ($attempt = 1; $attempt -le $Config.MaxRetries; $attempt++) {
        Write-Log "Attempt $attempt: Importing file $FilePath"
        $result = & sqlcmd -S $Config.SqlServer -d $Config.Database -i $Config.SqlScript `
            -v FilePath="'$FilePath'" -v MachineName="'$MachineName'" -b 2>&1

        if ($LASTEXITCODE -eq 0) {
            Move-Item -Path $FilePath -Destination $BackupPath -Force
            Write-Log "SUCCESS: Imported and moved $FilePath to Backup"
            return
        } else {
            Write-Log "FAILED: Attempt $attempt for $FilePath. Error: $result" "ERROR"
            Start-Sleep -Seconds 2
        }
    }

    Move-Item -Path $FilePath -Destination $ErrorPath -Force
    Write-Log "FINAL FAILURE: Moved $FilePath to Error folder after $Config.MaxRetries attempts." "ERROR"
}

function Import-All-Machines {
    Write-Log "Starting batch import for date $($Config.ImportDate)"
    $folders = Get-ChildItem -Path $Config.RootPath -Directory
    foreach ($folder in $folders) {
        $MachineName = $folder.Name
        $MachinePath = Join-Path $Config.RootPath $MachineName
        $BackupPath  = Join-Path $MachinePath "Backup"
        $ErrorPath   = Join-Path $MachinePath "Error"

        New-Item -ItemType Directory -Path $BackupPath -Force | Out-Null
        New-Item -ItemType Directory -Path $ErrorPath -Force | Out-Null

        $csvFiles = Get-ChildItem -Path $MachinePath -Filter "$($Config.ImportDate)*.csv" -File
        foreach ($file in $csvFiles) {
            Import-CsvFile -FilePath $file.FullName -MachineName $MachineName `
                           -BackupPath $BackupPath -ErrorPath $ErrorPath
        }
    }
    Write-Log "Batch import completed."
}

function Log-Heartbeat {
    Write-Log "[HEARTBEAT] Watcher running..."
}

# --- FILE WATCHER FOR LIVE STREAM ---
$watcher = New-Object System.IO.FileSystemWatcher
$watcher.Path = $Config.RootPath
$watcher.IncludeSubdirectories = $true
$watcher.Filter = "*.csv"
$watcher.EnableRaisingEvents = $true

Register-ObjectEvent $watcher "Created" -Action {
    Start-Sleep -Seconds 5
    $filePath = $Event.SourceEventArgs.FullPath
    $machineName = Split-Path $filePath -Parent | Split-Path -Leaf
    $machineFolder = Join-Path $Config.RootPath $machineName
    $backup = Join-Path $machineFolder "Backup"
    $error  = Join-Path $machineFolder "Error"

    New-Item -ItemType Directory -Path $backup -Force | Out-Null
    New-Item -ItemType Directory -Path $error -Force | Out-Null

    Import-CsvFile -FilePath $filePath -MachineName $machineName `
                   -BackupPath $backup -ErrorPath $error
}

# --- OPTIONAL: Run batch import on script startup ---
Import-All-Machines

# --- OPTIONAL: Log heartbeat every hour to confirm watcher health ---
Register-ScheduledJob -Name "WatcherHeartbeat" -ScriptBlock {
    Write-Log "[HEARTBEAT] Watcher is active."
} -Trigger (New-JobTrigger -Once -At (Get-Date).AddMinutes(60) -RepetitionInterval (New-TimeSpan -Minutes 60) -RepetitionDuration ([TimeSpan]::MaxValue)) -ScheduledJobOption (New-ScheduledJobOption -RunElevated) | Out-Null
