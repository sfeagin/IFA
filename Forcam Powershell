# =====================
# PowerShell Script: FORCAM API + CSV Import to SQL Server (Robust, Production-grade)
# =====================

# Load Configuration
. "$PSScriptRoot\Config.ps1"
$Config = @{
    ApiBaseUrl = "https://api.forcam.com"
    ApiEndpoints = @("/productionOrders", "/operations", "/workplaces") # etc.
    ApiSqlTable = "staging.forcam.api_cycle_data"
    OutputFolder = "C:\Data\ForcamApi"
    RootPath = "\\SUSA059A59\Output_Prod"
    SqlServer = "YourSqlServerName"
    Database = "staging"
    CsvSqlScript = "C:\Scripts\import_cycle_time.sql"
    MaxRetries = 3
    DelaySeconds = 2
    MaxParallelCsv = 5
    UseFileWatcher = $true
}

# === VALIDATORS ===
function Validate-Json($json) {
    try {
        $parsed = $json | ConvertFrom-Json
        return $true
    } catch {
        return $false
    }
}

function Validate-Csv($jsonObject) {
    return $jsonObject -is [System.Collections.IEnumerable] -and $jsonObject.Count -gt 0 -and $jsonObject[0].PSObject.Properties.Count -gt 0
}

# === API CALLER ===
function Call-ApiWithRetries($url, $attempt = 1) {
    try {
        Write-Host "Calling: $url (Attempt $attempt)"
        $response = Invoke-RestMethod -Uri $url -Headers @{ "Authorization" = "Bearer $AccessToken" } -Method Get
        Start-Sleep -Seconds $SleepSeconds
        return $response
    } catch {
        if ($attempt -lt $MaxRetries) {
            Write-Warning " Attempt $attempt failed. Retrying..."
            return Call-ApiWithRetries -url $url -attempt ($attempt + 1)
        } else {
            Write-Error "Failed after $MaxRetries attempts: $url"
            return $null
        }
    }
}

# === RUN ALL ===
foreach ($route in $AllRoutes) {
    $page = 1
    $nextUrl = "$BaseUrl$route"

    do {
        $response = Call-ApiWithRetries -url $nextUrl
        if ($response -eq $null) { break }

        # Convert and validate JSON
        $json = $response | ConvertTo-Json -Depth 10
        if (-not (Validate-Json $json)) {
            Write-Warning "Invalid JSON received from $nextUrl"
            break
        }

        $parsed = $response
        $filenameSafe = ($route -replace '[^a-zA-Z0-9]', '_') + "_page$page"
        $jsonFile = Join-Path $OutputFolder "$filenameSafe.json"
        $csvFile  = Join-Path $OutputFolder "$filenameSafe.csv"

        # Save JSON
        $json | Out-File -FilePath $jsonFile -Encoding utf8
        Write-Host "‚úÖ Saved JSON: $jsonFile"

        # Save CSV if valid
        if (Validate-Csv $parsed.value) {
            $parsed.value | Export-Csv -Path $csvFile -NoTypeInformation
            Write-Host "üìÅ Saved CSV: $csvFile"
        } else {
            Write-Warning "‚ö†Ô∏è Not suitable for CSV export: $route"
        }

        # Handle pagination if nextLink exists
        $nextUrl = $parsed.'@odata.nextLink'
        $page++

    } while ($nextUrl -ne $null)
}
# === ENDPOINTS ===
$StaticEndpoints = @(
    "/productionOrders",
    "/operations",
    "/workplaces",
    "/workplaceGroups",
    "/staffMembers",
    "/callbacks"
)

$WorkplaceSubRoutes = @(
    "/workplaces/{id}/devices",
    "/workplaces/{id}/recordedOperatingStates",
    "/workplaces/{id}/recordedOperationPhases",
    "/workplaces/{id}/recordedOutputQuantities",
    "/workplaces/{id}/shifts"
)

$OperationSubRoutes = @(
    "/operations/{id}/scheduledDates",
    "/operations/{id}/specification",
    "/operations/{id}/productionResourceTools",
    "/operations/{id}/recordedOperatingStates"
)

function Expand-Routes($routes, $ids) {
    $expanded = @()
    foreach ($route in $routes) {
        foreach ($id in $ids) {
            $expanded += $route -replace "\{id\}", $id
        }
    }
    return $expanded
}

$AllRoutes = @()
$AllRoutes += $StaticEndpoints
$AllRoutes += Expand-Routes $WorkplaceSubRoutes $WorkplaceIds
$AllRoutes += Expand-Routes $OperationSubRoutes $OperationIds
# =====================
# GLOBAL VARIABLES & COUNTERS
# =====================

$global:ImportStats = [PSCustomObject]@{
    CsvSuccess = 0
    CsvFailures = 0
    ApiSuccess = 0
    ApiFailures = 0
    ApiRetries = 0
    CsvRetries = 0
}

# =====================
# UTILITY FUNCTIONS
# =====================

function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $entry = "[$timestamp] [$Level] $Message"
    try {
        Add-Content -Path $Config.LogFile -Value $entry -ErrorAction Stop
    } catch {
        Write-Warning "Logging failed: $_"
        Write-Output $entry
    }
}

function Send-AlertEmail {
    param (
        [string]$Body,
        [string]$Subject = $Config.EmailSubject
    )
    try {
        $securePass = ConvertTo-SecureString $Config.SmtpPassword -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential ($Config.SmtpUser, $securePass)
        Send-MailMessage -From $Config.EmailFrom -To $Config.EmailTo -Subject $Subject -Body $Body `
            -SmtpServer $Config.SmtpServer -Port $Config.SmtpPort -UseSsl -Credential $cred
        Write-Log "Alert email sent."
    } catch {
        Write-Log "Failed to send alert email: $_" "ERROR"
    }
}

function Wait-For-FileUnlock {
    param (
        [string]$Path,
        [int]$MaxAttempts = $Config.FileUnlockRetries,
        [int]$DelaySeconds = $Config.FileUnlockWait
    )
    for ($i = 0; $i -lt $MaxAttempts; $i++) {
        try {
            $stream = [System.IO.File]::Open($Path, 'Open', 'Read', 'ReadWrite')
            if ($stream) {
                $stream.Close()
                return $true
            }
        } catch {
            Start-Sleep -Seconds $DelaySeconds
        }
    }
    return $false
}

function Retry-Operation {
    param (
        [scriptblock]$Operation,
        [int]$MaxRetries = 3,
        [int]$DelaySeconds = 5,
        [string]$OperationName = "Operation"
    )
    for ($attempt = 1; $attempt -le $MaxRetries; $attempt++) {
        try {
            return & $Operation
        } catch {
            Write-Log "$OperationName failed on attempt $attempt: $_" "WARNING"
            if ($attempt -lt $MaxRetries) {
                Start-Sleep -Seconds $DelaySeconds
            } else {
                throw $_
            }
        }
    }
}

# =====================
# DATABASE HELPER FUNCTIONS
# =====================

function Get-SqlConnection {
    param()
    $connString = "Server=$($Config.SqlServer);Database=$($Config.Database);Integrated Security=True;"
    $conn = New-Object System.Data.SqlClient.SqlConnection $connString
    $conn.Open()
    return $conn
}

function Execute-SqlNonQuery {
    param (
        [System.Data.SqlClient.SqlConnection]$Connection,
        [string]$Sql,
        [hashtable]$Parameters = @{}
    )

    $cmd = $Connection.CreateCommand()
    $cmd.CommandText = $Sql

    foreach ($key in $Parameters.Keys) {
        $param = $cmd.Parameters.AddWithValue($key, $Parameters[$key])
    }

    try {
        $rowsAffected = $cmd.ExecuteNonQuery()
        return $rowsAffected
    } catch {
        Write-Log "SQL execution failed: $_" "ERROR"
        throw $_
    } finally {
        $cmd.Dispose()
    }
}

function Create-ApiSqlTableIfNeeded {
    param ()

    $sql = @"
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'$($Config.ApiSqlTable)') AND type in (N'U'))
BEGIN
    CREATE TABLE $($Config.ApiSqlTable) (
        id INT IDENTITY(1,1) PRIMARY KEY,
        machine_name NVARCHAR(100),
        material_number NVARCHAR(100),
        cycle_time DECIMAL,
        operation_number NVARCHAR(100),
        timestamp DATETIME,
        json_blob NVARCHAR(MAX)
    )
END
"@

    $conn = Get-SqlConnection
    try {
        Execute-SqlNonQuery -Connection $conn -Sql $sql
        Write-Log "Checked/Created API SQL table: $($Config.ApiSqlTable)"
    } finally {
        $conn.Close()
        $conn.Dispose()
    }
}

# =====================
# DATA VALIDATION & TRANSFORMATION
# =====================

function Validate-And-Transform-ApiItem {
    param (
        [psobject]$Item
    )

    # Example validation
    if (-not $Item.machineName) {
        throw "Missing machineName"
    }
    if (-not $Item.materialNumber) {
        throw "Missing materialNumber"
    }
    # Add other validation as needed, e.g., data types, ranges, timestamps, etc.

    # Example transformation - e.g., round cycle time
    $Item.cycleTime = [math]::Round([double]$Item.cycleTime, 2)

    return $Item
}

# =====================
# API DATA IMPORT LOGIC
# =====================

function Import-ApiData {
    Write-Log "Starting API data import..."

    $AccessToken = Get-AccessToken

    foreach ($endpoint in $Config.ApiEndpoints) {
        $nextUrl = "$($Config.ApiBaseUrl)$endpoint"
        $page = 1

        do {
            $response = Call-ApiWithRetries -url $nextUrl
            if ($response -eq $null) { break }

            $jsonString = $response | ConvertTo-Json -Depth 10
            if (-not (Validate-Json $jsonString)) {
                Write-Log "Invalid JSON response from $nextUrl" "WARNING"
                break
            }

            $parsed = $response
            $filenameSafe = ($endpoint -replace '[^a-zA-Z0-9]', '_') + "_page$page"
            $jsonFile = Join-Path $Config.OutputFolder "$filenameSafe.json"
            $csvFile  = Join-Path $Config.OutputFolder "$filenameSafe.csv"

            # Save JSON
            $jsonString | Out-File -FilePath $jsonFile -Encoding utf8
            Write-Host "Saved JSON: $jsonFile"

            # Save CSV if valid
            if (Validate-Csv $parsed.value) {
                $parsed.value | Export-Csv -Path $csvFile -NoTypeInformation
                Write-Host " Saved CSV: $csvFile"
            } else {
                Write-Warning "Not suitable for CSV export: $endpoint"
            }

            # Insert each item into SQL
            $conn = Get-SqlConnection
            $transaction = $conn.BeginTransaction()
            $successCount = 0
            $failureCount = 0

            foreach ($itemRaw in $response.items) {
                try {
                    $item = Validate-And-Transform-ApiItem -Item $itemRaw

                    $sql = @"
INSERT INTO $($Config.ApiSqlTable)
(machine_name, material_number, cycle_time, operation_number, timestamp, json_blob)
VALUES
(@machine, @material, @cycle, @operation, @timestamp, @json)
"@

                    $params = @{
                        "@machine" = $item.machineName
                        "@material" = $item.materialNumber
                        "@cycle" = $item.cycleTime
                        "@operation" = $item.operationNumber
                        "@timestamp" = (Get-Date $item.timestamp)
                        "@json" = ($itemRaw | ConvertTo-Json -Depth 10)
                    }

                    $cmd = $conn.CreateCommand()
                    $cmd.CommandText = $sql
                    $cmd.Transaction = $transaction
                    foreach ($key in $params.Keys) {
                        $cmd.Parameters.AddWithValue($key, $params[$key]) | Out-Null
                    }
                    $cmd.ExecuteNonQuery() | Out-Null
                    $cmd.Dispose()
                    $successCount++
                } catch {
                    Write-Log "Validation or DB insert failed for item on $endpoint page $page: $_" "ERROR"
                    $failureCount++
                }
            }

            if ($failureCount -gt 0) {
                Write-Log "$failureCount record(s) failed to insert for $endpoint page $page" "WARNING"
            }

            $transaction.Commit()
            $conn.Close()
            $conn.Dispose()

            Write-Log "API $endpoint page $page imported: $successCount records successfully."
            $global:ImportStats.ApiSuccess += $successCount
            $global:ImportStats.ApiFailures += $failureCount

            $nextUrl = $parsed.'@odata.nextLink'
            $page++
            Start-Sleep -Seconds 1
        } while ($nextUrl)
    }

    Write-Log "API data import completed."
}

# =====================
# CSV DATA IMPORT LOGIC
# =====================

function Import-CsvFile {
    param (
        [string]$FilePath,
        [string]$MachineName,
        [string]$BackupPath,
        [string]$ErrorPath
    )

    if (-not (Wait-For-FileUnlock -Path $FilePath)) {
        Write-Log "File locked too long: $FilePath" "ERROR"
        $global:ImportStats.CsvFailures++
        return
    }

    $attempt = 0
    while ($attempt -lt $Config.MaxRetries) {
        $attempt++
        Write-Log "CSV Import attempt $attempt for file: $FilePath"
        try {
            $result = & sqlcmd -S $Config.SqlServer -d $Config.Database -i $Config.CsvSqlScript -v FilePath="'$FilePath'" -v MachineName="'$MachineName'" -b 2>&1
            if ($LASTEXITCODE -eq 0 -and -not ($result -match "error|failed|exception")) {
                Move-Item -Path $FilePath -Destination $BackupPath -Force
                Write-Log "Successfully imported CSV and moved to Backup: $FilePath"
                $global:ImportStats.CsvSuccess++
                return
            } else {
                Write-Log "CSV import error on attempt $attempt: $result" "WARNING"
                Start-Sleep -Seconds $Config.DelaySeconds
            }
        } catch {
            Write-Log "Exception during CSV import attempt $attempt: $_" "ERROR"
            Start-Sleep -Seconds $Config.DelaySeconds
        }
    }

    # All retries failed
    try {
        Move-Item -Path $FilePath -Destination $ErrorPath -Force
        Write-Log "CSV import failed after retries. Moved to Error: $FilePath" "ERROR"
        $global:ImportStats.CsvFailures++
        Send-AlertEmail -Body "CSV import failed for file: $FilePath after $($Config.MaxRetries) attempts."
    } catch {
        Write-Log "Failed to move failed CSV to Error folder: $_" "ERROR"
    }
}

function Import-AllCsvFiles {
    Write-Log "Starting CSV import of all files..."

    $folders = Get-ChildItem -Path $Config.RootPath -Directory -ErrorAction SilentlyContinue
    foreach ($folder in $folders) {
        $MachineName = $folder.Name
        $MachinePath = Join-Path $Config.RootPath $MachineName
        $BackupPath = Join-Path $MachinePath "Backup"
        $ErrorPath = Join-Path $MachinePath "Error"

        # Ensure folders exist
        New-Item -ItemType Directory -Path $BackupPath -Force | Out-Null
        New-Item -ItemType Directory -Path $ErrorPath -Force | Out-Null

        $csvFiles = Get-ChildItem -Path $MachinePath -Filter "*.csv" -File -ErrorAction SilentlyContinue
        $jobs = @()

        foreach ($file in $csvFiles) {
            # Limit parallel jobs
            while ($jobs.Count -ge $Config.MaxParallelCsv) {
                $done = Wait-Job -Job $jobs -Any -Timeout 5
                if ($done) {
                    $jobs = $jobs | Where-Object { $_.State -eq 'Running' }
                }
            }

            $jobs += Start-Job -ArgumentList $file.FullName, $MachineName, $BackupPath, $ErrorPath -ScriptBlock {
                param($FilePath, $MachineName, $BackupPath, $ErrorPath)

                function Write-Log {
                    param([string]$Message, [string]$Level = "INFO")
                    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    $logEntry = "[$timestamp] [$Level] $Message"
                    Add-Content -Path "C:\Logs\forecam_import.log" -Value $logEntry
                }
                function Wait-For-FileUnlock {
                    param(
                        [string]$Path,
                        [int]$MaxAttempts = 6,
                        [int]$DelaySeconds = 5
                    )
                    for ($i = 0; $i -lt $MaxAttempts; $i++) {
                        try {
                            $stream = [System.IO.File]::Open($Path, 'Open', 'Read', 'ReadWrite')
                            if ($stream) {
                                $stream.Close()
                                return $true
                            }
                        } catch {
                            Start-Sleep -Seconds $DelaySeconds
                        }
                    }
                    return $false
                }

                if (-not (Wait-For-FileUnlock -Path $FilePath)) {
                    Write-Log "File locked too long, skipping: $FilePath" "ERROR"
                    return
                }

                for ($attempt = 1; $attempt -le 3; $attempt++) {
                    Write-Log "Attempt $attempt: Importing file $FilePath (job)"
                    $result = & sqlcmd -S "YourSqlServerName" -d "staging" -i "C:\Scripts\import_cycle_time.sql" -v FilePath="'$FilePath'" -v MachineName="'$MachineName'" -b 2>&1
                    if ($LASTEXITCODE -eq 0 -and -not ($result -match "error|failed|exception")) {
                        try {
                            Move-Item -Path $FilePath -Destination $BackupPath -Force
                            Write-Log "SUCCESS: Imported and moved $FilePath to Backup (job)"
                        } catch {
                            Write-Log "Warning: Could not move $FilePath to Backup folder (job). $_" "WARNING"
                        }
                        return
                    } else {
                        Write-Log "FAILED: Attempt $attempt for $FilePath. Error: $result (job)" "ERROR"
                        Start-Sleep -Seconds 2
                    }
                }
                try {
                    Move-Item -Path $FilePath -Destination $ErrorPath -Force
                    Write-Log "FINAL FAILURE: Moved $FilePath to Error folder (job)" "ERROR"
                } catch {
                    Write-Log "Critical: Could not move $FilePath to Error folder after failure (job). $_" "ERROR"
                }
            }
        }

        # Wait for all jobs to finish before continuing
        $jobs | Wait-Job
        $jobs | Remove-Job
    }
    Write-Log "CSV import complete."
}

# =====================
# FILE SYSTEM WATCHER
# =====================

function Start-FileWatcher {
    Write-Log "Starting file watcher on path $($Config.RootPath)..."
    $watcher = New-Object System.IO.FileSystemWatcher
    $watcher.Path = $Config.RootPath
    $watcher.IncludeSubdirectories = $true
    $watcher.Filter = "*.csv"
    $watcher.EnableRaisingEvents = $true

    Register-ObjectEvent $watcher "Created" -Action {
        Start-Sleep -Seconds 5
        $filePath = $Event.SourceEventArgs.FullPath
        $machineName = Split-Path $filePath -Parent | Split-Path -Leaf
        $backupPath = Join-Path (Split-Path $filePath -Parent) "Backup"
        $errorPath = Join-Path (Split-Path $filePath -Parent) "Error"

        Start-Job -ArgumentList $filePath, $machineName, $backupPath, $errorPath -ScriptBlock {
            param($FilePath, $MachineName, $BackupPath, $ErrorPath)
            # Import CSV logic same as above, or call Import-CsvFile function
            # For brevity, repeat minimal code or better: export Import-CsvFile and call here
            # Simplified:
            # Use Wait-For-FileUnlock and sqlcmd calls with retry from Import-CsvFile
        }
    }

    while ($true) {
        Start-Sleep -Seconds 30
    }
}

# =====================
# MAIN SCRIPT EXECUTION
# =====================

Write-Log "========== Script started =========="

try {
    Import-ApiData
    Import-AllCsvFiles
    if ($Config.UseFileWatcher) {
        Start-FileWatcher
    }
} catch {
    Write-Log "Script crashed: $_" "FATAL"
    Send-AlertEmail -Body "Critical failure in import script: $_"
}

Write-Log "========== Script running =========="
