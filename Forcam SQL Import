-- Version 1.2 - Supports CSV and JSON input
-- Parameters: MachineName, FilePath, FileType
-- Assumes UTF-8 files, Windows auth, and FORCAM structure

DECLARE @MachineName NVARCHAR(100) = '$(MachineName)';
DECLARE @FilePath NVARCHAR(500) = '$(FilePath)';
DECLARE @FileType NVARCHAR(10) = '$(FileType)';
DECLARE @ScriptVersion NVARCHAR(10) = '1.2';

BEGIN TRY
    BEGIN TRANSACTION;

    IF @FileType = '.csv'
    BEGIN
        -- Load CSV to temp table
        CREATE TABLE #raw_csv (
            [date] DATE,
            [time] TIME(0),
            workplace NVARCHAR(50),
            ordernumber NVARCHAR(50),
            operationnumber NVARCHAR(50),
            materialnumber NVARCHAR(50),
            te_sap REAL
        );

        BULK INSERT #raw_csv
        FROM @FilePath
        WITH (
            FIRSTROW = 2,
            FIELDTERMINATOR = ',',
            ROWTERMINATOR = '0x0A',
            CODEPAGE = '65001'
        );

        -- Insert with validation and merge
        MERGE staging.forcam.cycle_time AS tgt
        USING (
            SELECT
                @MachineName AS machine_name,
                date,
                time,
                workplace,
                ordernumber,
                operationnumber,
                materialnumber,
                te_sap
            FROM #raw_csv
            WHERE date IS NOT NULL AND time IS NOT NULL AND workplace IS NOT NULL
        ) AS src
        ON tgt.machine_name = src.machine_name
            AND tgt.date = src.date
            AND tgt.time = src.time
            AND tgt.materialnumber = src.materialnumber
            AND tgt.operationnumber = src.operationnumber
        WHEN NOT MATCHED THEN
            INSERT (machine_name, [date], [time], workplace, ordernumber, operationnumber, materialnumber, te_sap)
            VALUES (src.machine_name, src.date, src.time, src.workplace, src.ordernumber, src.operationnumber, src.materialnumber, src.te_sap);

        DROP TABLE #raw_csv;
    END

    ELSE IF @FileType = '.json'
    BEGIN
        -- Load JSON to temp table
        DECLARE @json NVARCHAR(MAX);
        SELECT @json = BulkColumn FROM OPENROWSET (BULK @FilePath, SINGLE_CLOB) AS j;

        WITH ParsedJSON AS (
            SELECT *
            FROM OPENJSON(@json)
            WITH (
                [date] DATE,
                [time] TIME(0),
                workplace NVARCHAR(50),
                ordernumber NVARCHAR(50),
                operationnumber NVARCHAR(50),
                materialnumber NVARCHAR(50),
                te_sap REAL
            )
        )
        MERGE staging.forcam.cycle_time AS tgt
        USING (
            SELECT
                @MachineName AS machine_name,
                date,
                time,
                workplace,
                ordernumber,
                operationnumber,
                materialnumber,
                te_sap
            FROM ParsedJSON
            WHERE date IS NOT NULL AND time IS NOT NULL AND workplace IS NOT NULL
        ) AS src
        ON tgt.machine_name = src.machine_name
            AND tgt.date = src.date
            AND tgt.time = src.time
            AND tgt.materialnumber = src.materialnumber
            AND tgt.operationnumber = src.operationnumber
        WHEN NOT MATCHED THEN
            INSERT (machine_name, [date], [time], workplace, ordernumber, operationnumber, materialnumber, te_sap)
            VALUES (src.machine_name, src.date, src.time, src.workplace, src.ordernumber, src.operationnumber, src.materialnumber, src.te_sap);
    END

    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION;

    INSERT INTO staging.forcam.error_log (
        error_message, error_date, error_severity, error_line,
        machine_name, file_path, script_version
    )
    VALUES (
        ERROR_MESSAGE(), GETDATE(), ERROR_SEVERITY(), ERROR_LINE(),
        @MachineName, @FilePath, @ScriptVersion
    );

    THROW;
END CATCH;

